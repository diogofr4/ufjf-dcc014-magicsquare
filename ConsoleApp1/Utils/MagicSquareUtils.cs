using System;
using System.Collections.Generic;
using System.Text;

namespace ConsoleApp1.Utils
{
    public static class MagicSquareUtils
    {
        /// <summary>
        /// Method to verify the rules that indicates if a node is a valid canditate or not. Also verify if the magic square is completed with success.
        /// </summary>
        /// <param name="magicSquare">Magic square generated by the node.</param>
        /// <param name="success">Indicates if the magic square is completed with success or not.</param>
        /// <returns>Return if the magic square matched the rules.</returns>
        public static bool VerifyRules(int[,] magicSquare, out bool success)
        {
            success = false;
            var rules = VerifyLines(magicSquare) && VerifyColumns(magicSquare) && VerifyDiagonal(magicSquare);
            if (rules && VerifyFullSquare(magicSquare))
                success = true;

            return rules;
        }

        /// <summary>
        /// Verify if the square is completed.
        /// </summary>
        /// <param name="magicSquare">Magic square to be verified.</param>
        /// <returns>Return true if the square is full or false otherwise.</returns>
        private static bool VerifyFullSquare(int[,] magicSquare)
        {
            for(int i = 0; i < 3; i++)
            {
                for(int j = 0; j < 3; j++)
                {
                    if (magicSquare[i, j] == 0)
                        return false;
                }
            }

            return true;
        }

        /// <summary>
        /// Verify if the sum of each line of the square equal or less than 15. 
        /// </summary>
        /// <param name="magicSquare">Magi square to be checked.</param>
        /// <returns>If only two field of the line are filled and the sum equals 15, returns false. If all three fields of the line are filled and the sum doesn't equals 15, return false. If the sum in any case is higher than 15, returns false. Returns true otherwise.</returns>
        private static bool VerifyLines(int[,] magicSquare)
        {
            var sum = 0;
            for (int line = 0; line < 3; line++)
            {
                for(int column = 0; column < 3; column++)
                {
                    sum += magicSquare[line, column];
                    if (magicSquare[line, column] == 0 && sum < 15)
                        return true;

                    if (sum > 15 || (column == 1 && sum == 15) || (column == 2 && sum != 15))
                        return false;
                }

                sum = 0;
            }

            return true;
        }

        /// <summary>
        /// Verify if the sum of each column of the square equal or less than 15. 
        /// </summary>
        /// <param name="magicSquare">Magic square to be checked.</param>
        /// <returns>If only two field of the column are filled and the sum equals 15, returns false. If all three fields of the column are filled and the sum doesn't equals 15, return false. If the sum in any case is higher than 15, returns false. Returns true otherwise.</returns>
        private static bool VerifyColumns(int[,] magicSquare)
        {
            var sum = 0;
            for (int column = 0; column < 3; column++)
            {
                for (int line = 0; line < 3; line++)
                {
                    sum += magicSquare[line, column];
                    if (magicSquare[line, column] == 0 && sum < 15)
                        return true;

                    if (sum > 15 || (line == 1 && sum == 15) || (line == 2 && sum != 15))
                        return false;
                }

                sum = 0;
            }

            return true;
        }

        /// <summary>
        /// Verify if the sum of each diagonal of the square equal or less than 15.
        /// </summary>
        /// <param name="magicSquare">Magic square to be checked.</param>
        /// <returns>If only two field of the diagonal are filled and the sum equals 15, returns false. If all three fields of the diagonal are filled and the sum doesn't equals 15, return false. If the sum in any case is higher than 15, returns false. Returns true otherwise.</returns>
        private static bool VerifyDiagonal(int[,] magicSquare)
        {
            var sum = 0;
            for (int diagonal = 0; diagonal < 3; diagonal++)
            {
                sum += magicSquare[diagonal, diagonal];
                if (magicSquare[diagonal, diagonal] == 0 && sum < 15)
                    return true;

                if (sum > 15 || (diagonal == 1 && sum == 15) || (diagonal == 2 && sum != 15))
                        return false;
            }

            sum = 0;
            for (int diagonal = 0; diagonal < 3; diagonal++)
            {
                sum += magicSquare[diagonal, 2 - diagonal];
                if (magicSquare[diagonal, 2 - diagonal] == 0 && sum < 15)
                    return true;

                if (sum > 15 || (diagonal == 1 && sum == 15) || (diagonal == 2 && sum != 15))
                    return false;
            }

            return true;
        }

        /// <summary>
        /// Adds a value to the next empty field of the magic square passed as parameter, following the steps of going from the top to bottom and left to right.
        /// </summary>
        /// <param name="value">Value to be added.</param>
        /// <param name="magicSquare">Magic square to be filled with the value.</param>
        /// <returns>The magic square with the value filled.</returns>
        public static int[,] AddsValueToMagicSquare(int value, int[,] magicSquare)
        {
            if (magicSquare == null)
                magicSquare = new int[3, 3];

            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    if (magicSquare[i, j] == 0)
                    {
                        magicSquare[i, j] = value;
                        return magicSquare;
                    }
                }
            }

            return magicSquare;
        }
    }
}
